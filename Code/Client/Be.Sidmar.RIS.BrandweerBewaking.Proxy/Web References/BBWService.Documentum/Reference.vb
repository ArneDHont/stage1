'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace BBWService.Documentum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BBWServicesSoap", [Namespace]:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices")>  _
    Partial Public Class BBWServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private TestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportDocumentDirectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://svsim045.sidmar.be/DocService.DocInfo/BBWServices.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event TestCompleted As TestCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportDocumentDirectCompleted As ImportDocumentDirectCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDocumentCompleted As DeleteDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContentCompleted As GetContentCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewVersionCompleted As CreateNewVersionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices/Test", RequestNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", ResponseNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Test() As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Test", New Object(-1) {})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginTest(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Test", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndTest(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestAsync()
            Me.TestAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestAsync(ByVal userState As Object)
            If (Me.TestOperationCompleted Is Nothing) Then
                Me.TestOperationCompleted = AddressOf Me.OnTestOperationCompleted
            End If
            Me.InvokeAsync("Test", New Object(-1) {}, Me.TestOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestCompleted(Me, New TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices/ImportDocumentDi"& _ 
            "rect", RequestNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", ResponseNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportDocumentDirect(ByVal objectName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal content() As Byte, ByVal contentType As String, ByVal folderPath As String, ByVal userName As String, ByVal title As String, ByVal language As String) As String
            Dim results() As Object = Me.Invoke("ImportDocumentDirect", New Object() {objectName, content, contentType, folderPath, userName, title, language})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginImportDocumentDirect(ByVal objectName As String, ByVal content() As Byte, ByVal contentType As String, ByVal folderPath As String, ByVal userName As String, ByVal title As String, ByVal language As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ImportDocumentDirect", New Object() {objectName, content, contentType, folderPath, userName, title, language}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndImportDocumentDirect(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportDocumentDirectAsync(ByVal objectName As String, ByVal content() As Byte, ByVal contentType As String, ByVal folderPath As String, ByVal userName As String, ByVal title As String, ByVal language As String)
            Me.ImportDocumentDirectAsync(objectName, content, contentType, folderPath, userName, title, language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportDocumentDirectAsync(ByVal objectName As String, ByVal content() As Byte, ByVal contentType As String, ByVal folderPath As String, ByVal userName As String, ByVal title As String, ByVal language As String, ByVal userState As Object)
            If (Me.ImportDocumentDirectOperationCompleted Is Nothing) Then
                Me.ImportDocumentDirectOperationCompleted = AddressOf Me.OnImportDocumentDirectOperationCompleted
            End If
            Me.InvokeAsync("ImportDocumentDirect", New Object() {objectName, content, contentType, folderPath, userName, title, language}, Me.ImportDocumentDirectOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportDocumentDirectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportDocumentDirectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportDocumentDirectCompleted(Me, New ImportDocumentDirectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices/DeleteDocument", RequestNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", ResponseNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteDocument(ByVal chronicleId As String, ByVal userName As String)
            Me.Invoke("DeleteDocument", New Object() {chronicleId, userName})
        End Sub
        
        '''<remarks/>
        Public Function BeginDeleteDocument(ByVal chronicleId As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDocument", New Object() {chronicleId, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndDeleteDocument(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentAsync(ByVal chronicleId As String, ByVal userName As String)
            Me.DeleteDocumentAsync(chronicleId, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentAsync(ByVal chronicleId As String, ByVal userName As String, ByVal userState As Object)
            If (Me.DeleteDocumentOperationCompleted Is Nothing) Then
                Me.DeleteDocumentOperationCompleted = AddressOf Me.OnDeleteDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteDocument", New Object() {chronicleId, userName}, Me.DeleteDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDocumentCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices/GetContent", RequestNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", ResponseNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContent(ByVal chronicleId As String, ByVal userName As String, ByRef fileName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetContent", New Object() {chronicleId, userName, fileName})
            fileName = CType(results(1),String)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginGetContent(ByVal chronicleId As String, ByVal userName As String, ByVal fileName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetContent", New Object() {chronicleId, userName, fileName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetContent(ByVal asyncResult As System.IAsyncResult, ByRef fileName As String) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            fileName = CType(results(1),String)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContentAsync(ByVal chronicleId As String, ByVal userName As String, ByVal fileName As String)
            Me.GetContentAsync(chronicleId, userName, fileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContentAsync(ByVal chronicleId As String, ByVal userName As String, ByVal fileName As String, ByVal userState As Object)
            If (Me.GetContentOperationCompleted Is Nothing) Then
                Me.GetContentOperationCompleted = AddressOf Me.OnGetContentOperationCompleted
            End If
            Me.InvokeAsync("GetContent", New Object() {chronicleId, userName, fileName}, Me.GetContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContentCompleted(Me, New GetContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices/CreateNewVersion"& _ 
            "", RequestNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", ResponseNamespace:="http://tempuri.org/Be.Sidmar.Documentum.POC.Services/BBWServices", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewVersion(ByVal chronicleId As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal content() As Byte, ByVal userName As String) As String
            Dim results() As Object = Me.Invoke("CreateNewVersion", New Object() {chronicleId, content, userName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateNewVersion(ByVal chronicleId As String, ByVal content() As Byte, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateNewVersion", New Object() {chronicleId, content, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateNewVersion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewVersionAsync(ByVal chronicleId As String, ByVal content() As Byte, ByVal userName As String)
            Me.CreateNewVersionAsync(chronicleId, content, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewVersionAsync(ByVal chronicleId As String, ByVal content() As Byte, ByVal userName As String, ByVal userState As Object)
            If (Me.CreateNewVersionOperationCompleted Is Nothing) Then
                Me.CreateNewVersionOperationCompleted = AddressOf Me.OnCreateNewVersionOperationCompleted
            End If
            Me.InvokeAsync("CreateNewVersion", New Object() {chronicleId, content, userName}, Me.CreateNewVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewVersionCompleted(Me, New CreateNewVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub TestCompletedEventHandler(ByVal sender As Object, ByVal e As TestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ImportDocumentDirectCompletedEventHandler(ByVal sender As Object, ByVal e As ImportDocumentDirectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportDocumentDirectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub DeleteDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetContentCompletedEventHandler(ByVal sender As Object, ByVal e As GetContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property fileName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub CreateNewVersionCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
