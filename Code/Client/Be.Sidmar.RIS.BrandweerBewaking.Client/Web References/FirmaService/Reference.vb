'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace FirmaService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServicesSoap", [Namespace]:="http://tempuri.org/HRMService.Firma/Services")>  _
    Partial Public Class Services
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetFirmaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListChildrenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListParentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListParentHasActiveEmployeesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListFirmaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListFirmaActiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListFirmaActiveByRegioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListFirmaAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchFirmaAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateParentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFirmaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncFirmasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActivateFirmaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyWithEmailAddressesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Be.Sidmar.RIS.BrandweerBewaking.Client.My.MySettings.Default.Be_Sidmar_RIS_BrandweerBewaking_Client_FirmaService_Services
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetFirmaCompleted As GetFirmaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListChildrenCompleted As GetListChildrenCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListParentCompleted As GetListParentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListParentHasActiveEmployeesCompleted As GetListParentHasActiveEmployeesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListFirmaCompleted As GetListFirmaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListFirmaActiveCompleted As GetListFirmaActiveCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListFirmaActiveByRegioCompleted As GetListFirmaActiveByRegioCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListFirmaAllCompleted As GetListFirmaAllCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchFirmaAllCompleted As SearchFirmaAllCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateParentCompleted As UpdateParentCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFirmaCompleted As CreateFirmaCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncFirmasCompleted As SyncFirmasCompletedEventHandler
        
        '''<remarks/>
        Public Event ActivateFirmaCompleted As ActivateFirmaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyWithEmailAddressesCompleted As GetCompanyWithEmailAddressesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetFirma", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFirma(ByVal Firma As Long) As tdsFirma
            Dim results() As Object = Me.Invoke("GetFirma", New Object() {Firma})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFirmaAsync(ByVal Firma As Long)
            Me.GetFirmaAsync(Firma, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFirmaAsync(ByVal Firma As Long, ByVal userState As Object)
            If (Me.GetFirmaOperationCompleted Is Nothing) Then
                Me.GetFirmaOperationCompleted = AddressOf Me.OnGetFirmaOperationCompleted
            End If
            Me.InvokeAsync("GetFirma", New Object() {Firma}, Me.GetFirmaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFirmaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFirmaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFirmaCompleted(Me, New GetFirmaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListChildren", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListChildren(ByVal Firma As Long) As tdsFirma
            Dim results() As Object = Me.Invoke("GetListChildren", New Object() {Firma})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListChildrenAsync(ByVal Firma As Long)
            Me.GetListChildrenAsync(Firma, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListChildrenAsync(ByVal Firma As Long, ByVal userState As Object)
            If (Me.GetListChildrenOperationCompleted Is Nothing) Then
                Me.GetListChildrenOperationCompleted = AddressOf Me.OnGetListChildrenOperationCompleted
            End If
            Me.InvokeAsync("GetListChildren", New Object() {Firma}, Me.GetListChildrenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListChildrenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListChildrenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListChildrenCompleted(Me, New GetListChildrenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListParent", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListParent() As tdsFirma
            Dim results() As Object = Me.Invoke("GetListParent", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListParentAsync()
            Me.GetListParentAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListParentAsync(ByVal userState As Object)
            If (Me.GetListParentOperationCompleted Is Nothing) Then
                Me.GetListParentOperationCompleted = AddressOf Me.OnGetListParentOperationCompleted
            End If
            Me.InvokeAsync("GetListParent", New Object(-1) {}, Me.GetListParentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListParentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListParentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListParentCompleted(Me, New GetListParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListParentHasActiveEmployees", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListParentHasActiveEmployees() As tdsFirma
            Dim results() As Object = Me.Invoke("GetListParentHasActiveEmployees", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListParentHasActiveEmployeesAsync()
            Me.GetListParentHasActiveEmployeesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListParentHasActiveEmployeesAsync(ByVal userState As Object)
            If (Me.GetListParentHasActiveEmployeesOperationCompleted Is Nothing) Then
                Me.GetListParentHasActiveEmployeesOperationCompleted = AddressOf Me.OnGetListParentHasActiveEmployeesOperationCompleted
            End If
            Me.InvokeAsync("GetListParentHasActiveEmployees", New Object(-1) {}, Me.GetListParentHasActiveEmployeesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListParentHasActiveEmployeesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListParentHasActiveEmployeesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListParentHasActiveEmployeesCompleted(Me, New GetListParentHasActiveEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListFirma", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListFirma() As tdsFirma
            Dim results() As Object = Me.Invoke("GetListFirma", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaAsync()
            Me.GetListFirmaAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaAsync(ByVal userState As Object)
            If (Me.GetListFirmaOperationCompleted Is Nothing) Then
                Me.GetListFirmaOperationCompleted = AddressOf Me.OnGetListFirmaOperationCompleted
            End If
            Me.InvokeAsync("GetListFirma", New Object(-1) {}, Me.GetListFirmaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListFirmaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListFirmaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListFirmaCompleted(Me, New GetListFirmaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListFirmaActive", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListFirmaActive() As tdsFirma
            Dim results() As Object = Me.Invoke("GetListFirmaActive", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaActiveAsync()
            Me.GetListFirmaActiveAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaActiveAsync(ByVal userState As Object)
            If (Me.GetListFirmaActiveOperationCompleted Is Nothing) Then
                Me.GetListFirmaActiveOperationCompleted = AddressOf Me.OnGetListFirmaActiveOperationCompleted
            End If
            Me.InvokeAsync("GetListFirmaActive", New Object(-1) {}, Me.GetListFirmaActiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListFirmaActiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListFirmaActiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListFirmaActiveCompleted(Me, New GetListFirmaActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListFirmaActiveByRegio", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListFirmaActiveByRegio(ByVal regio As String) As tdsFirma
            Dim results() As Object = Me.Invoke("GetListFirmaActiveByRegio", New Object() {regio})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaActiveByRegioAsync(ByVal regio As String)
            Me.GetListFirmaActiveByRegioAsync(regio, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaActiveByRegioAsync(ByVal regio As String, ByVal userState As Object)
            If (Me.GetListFirmaActiveByRegioOperationCompleted Is Nothing) Then
                Me.GetListFirmaActiveByRegioOperationCompleted = AddressOf Me.OnGetListFirmaActiveByRegioOperationCompleted
            End If
            Me.InvokeAsync("GetListFirmaActiveByRegio", New Object() {regio}, Me.GetListFirmaActiveByRegioOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListFirmaActiveByRegioOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListFirmaActiveByRegioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListFirmaActiveByRegioCompleted(Me, New GetListFirmaActiveByRegioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetListFirmaAll", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListFirmaAll() As tdsFirma
            Dim results() As Object = Me.Invoke("GetListFirmaAll", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaAllAsync()
            Me.GetListFirmaAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListFirmaAllAsync(ByVal userState As Object)
            If (Me.GetListFirmaAllOperationCompleted Is Nothing) Then
                Me.GetListFirmaAllOperationCompleted = AddressOf Me.OnGetListFirmaAllOperationCompleted
            End If
            Me.InvokeAsync("GetListFirmaAll", New Object(-1) {}, Me.GetListFirmaAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListFirmaAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListFirmaAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListFirmaAllCompleted(Me, New GetListFirmaAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/SearchFirmaAll", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchFirmaAll(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FirmaNr As System.Nullable(Of Long), ByVal Firmanaam As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal IsActief As System.Nullable(Of Boolean), ByVal Regio As String) As tdsFirma
            Dim results() As Object = Me.Invoke("SearchFirmaAll", New Object() {FirmaNr, Firmanaam, IsActief, Regio})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchFirmaAllAsync(ByVal FirmaNr As System.Nullable(Of Long), ByVal Firmanaam As String, ByVal IsActief As System.Nullable(Of Boolean), ByVal Regio As String)
            Me.SearchFirmaAllAsync(FirmaNr, Firmanaam, IsActief, Regio, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchFirmaAllAsync(ByVal FirmaNr As System.Nullable(Of Long), ByVal Firmanaam As String, ByVal IsActief As System.Nullable(Of Boolean), ByVal Regio As String, ByVal userState As Object)
            If (Me.SearchFirmaAllOperationCompleted Is Nothing) Then
                Me.SearchFirmaAllOperationCompleted = AddressOf Me.OnSearchFirmaAllOperationCompleted
            End If
            Me.InvokeAsync("SearchFirmaAll", New Object() {FirmaNr, Firmanaam, IsActief, Regio}, Me.SearchFirmaAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchFirmaAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchFirmaAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchFirmaAllCompleted(Me, New SearchFirmaAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/UpdateParent", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateParent() As tdsFirma
            Dim results() As Object = Me.Invoke("UpdateParent", New Object(-1) {})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateParentAsync()
            Me.UpdateParentAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateParentAsync(ByVal userState As Object)
            If (Me.UpdateParentOperationCompleted Is Nothing) Then
                Me.UpdateParentOperationCompleted = AddressOf Me.OnUpdateParentOperationCompleted
            End If
            Me.InvokeAsync("UpdateParent", New Object(-1) {}, Me.UpdateParentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateParentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateParentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateParentCompleted(Me, New UpdateParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/CreateFirma", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFirma(ByVal firma As Long, ByVal firmanaam As String, ByVal parent As Long) As tdsFirma
            Dim results() As Object = Me.Invoke("CreateFirma", New Object() {firma, firmanaam, parent})
            Return CType(results(0),tdsFirma)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFirmaAsync(ByVal firma As Long, ByVal firmanaam As String, ByVal parent As Long)
            Me.CreateFirmaAsync(firma, firmanaam, parent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFirmaAsync(ByVal firma As Long, ByVal firmanaam As String, ByVal parent As Long, ByVal userState As Object)
            If (Me.CreateFirmaOperationCompleted Is Nothing) Then
                Me.CreateFirmaOperationCompleted = AddressOf Me.OnCreateFirmaOperationCompleted
            End If
            Me.InvokeAsync("CreateFirma", New Object() {firma, firmanaam, parent}, Me.CreateFirmaOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFirmaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFirmaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFirmaCompleted(Me, New CreateFirmaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/SyncFirmas", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SyncFirmas()
            Me.Invoke("SyncFirmas", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncFirmasAsync()
            Me.SyncFirmasAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncFirmasAsync(ByVal userState As Object)
            If (Me.SyncFirmasOperationCompleted Is Nothing) Then
                Me.SyncFirmasOperationCompleted = AddressOf Me.OnSyncFirmasOperationCompleted
            End If
            Me.InvokeAsync("SyncFirmas", New Object(-1) {}, Me.SyncFirmasOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncFirmasOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncFirmasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncFirmasCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/ActivateFirma", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ActivateFirma(ByVal firmaNrs() As Long, ByVal newValue As Boolean, ByVal regio As String)
            Me.Invoke("ActivateFirma", New Object() {firmaNrs, newValue, regio})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActivateFirmaAsync(ByVal firmaNrs() As Long, ByVal newValue As Boolean, ByVal regio As String)
            Me.ActivateFirmaAsync(firmaNrs, newValue, regio, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActivateFirmaAsync(ByVal firmaNrs() As Long, ByVal newValue As Boolean, ByVal regio As String, ByVal userState As Object)
            If (Me.ActivateFirmaOperationCompleted Is Nothing) Then
                Me.ActivateFirmaOperationCompleted = AddressOf Me.OnActivateFirmaOperationCompleted
            End If
            Me.InvokeAsync("ActivateFirma", New Object() {firmaNrs, newValue, regio}, Me.ActivateFirmaOperationCompleted, userState)
        End Sub
        
        Private Sub OnActivateFirmaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActivateFirmaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActivateFirmaCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HRMService.Firma/Services/GetCompanyWithEmailAddresses", RequestNamespace:="http://tempuri.org/HRMService.Firma/Services", ResponseNamespace:="http://tempuri.org/HRMService.Firma/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanyWithEmailAddresses(ByVal companyNbr As Integer) As CompanyWithEmailAddresses
            Dim results() As Object = Me.Invoke("GetCompanyWithEmailAddresses", New Object() {companyNbr})
            Return CType(results(0),CompanyWithEmailAddresses)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyWithEmailAddressesAsync(ByVal companyNbr As Integer)
            Me.GetCompanyWithEmailAddressesAsync(companyNbr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyWithEmailAddressesAsync(ByVal companyNbr As Integer, ByVal userState As Object)
            If (Me.GetCompanyWithEmailAddressesOperationCompleted Is Nothing) Then
                Me.GetCompanyWithEmailAddressesOperationCompleted = AddressOf Me.OnGetCompanyWithEmailAddressesOperationCompleted
            End If
            Me.InvokeAsync("GetCompanyWithEmailAddresses", New Object() {companyNbr}, Me.GetCompanyWithEmailAddressesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyWithEmailAddressesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyWithEmailAddressesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyWithEmailAddressesCompleted(Me, New GetCompanyWithEmailAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("tdsFirma"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")>  _
    Partial Public Class tdsFirma
        Inherits Global.System.Data.DataSet
        
        Private tablesapReturn As sapReturnDataTable
        
        Private tableFirma As FirmaDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("sapReturn")) Is Nothing) Then
                    MyBase.Tables.Add(New sapReturnDataTable(ds.Tables("sapReturn")))
                End If
                If (Not (ds.Tables("Firma")) Is Nothing) Then
                    MyBase.Tables.Add(New FirmaDataTable(ds.Tables("Firma")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property sapReturn() As sapReturnDataTable
            Get
                Return Me.tablesapReturn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Firma() As FirmaDataTable
            Get
                Return Me.tableFirma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As tdsFirma = CType(MyBase.Clone,tdsFirma)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("sapReturn")) Is Nothing) Then
                    MyBase.Tables.Add(New sapReturnDataTable(ds.Tables("sapReturn")))
                End If
                If (Not (ds.Tables("Firma")) Is Nothing) Then
                    MyBase.Tables.Add(New FirmaDataTable(ds.Tables("Firma")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tablesapReturn = CType(MyBase.Tables("sapReturn"),sapReturnDataTable)
            If (initTable = true) Then
                If (Not (Me.tablesapReturn) Is Nothing) Then
                    Me.tablesapReturn.InitVars
                End If
            End If
            Me.tableFirma = CType(MyBase.Tables("Firma"),FirmaDataTable)
            If (initTable = true) Then
                If (Not (Me.tableFirma) Is Nothing) Then
                    Me.tableFirma.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "tdsFirma"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/tdsFirma.xsd"
            Me.Locale = New Global.System.Globalization.CultureInfo("en-US")
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tablesapReturn = New sapReturnDataTable()
            MyBase.Tables.Add(Me.tablesapReturn)
            Me.tableFirma = New FirmaDataTable()
            MyBase.Tables.Add(Me.tableFirma)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializesapReturn() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeFirma() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As tdsFirma = New tdsFirma()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub sapReturnRowChangeEventHandler(ByVal sender As Object, ByVal e As sapReturnRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub FirmaRowChangeEventHandler(ByVal sender As Object, ByVal e As FirmaRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class sapReturnDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnmeldingstype As Global.System.Data.DataColumn
            
            Private columnmeldingsklasse As Global.System.Data.DataColumn
            
            Private columnmeldingsnummer As Global.System.Data.DataColumn
            
            Private columnmeldingstekst As Global.System.Data.DataColumn
            
            Private columnmeldingsvariable1 As Global.System.Data.DataColumn
            
            Private columnmeldingsvariable2 As Global.System.Data.DataColumn
            
            Private columnmeldingsvariable3 As Global.System.Data.DataColumn
            
            Private columnmeldingsvariable4 As Global.System.Data.DataColumn
            
            Private columnSAPsysteem As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "sapReturn"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingstypeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingstype
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsklasseColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsklasse
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsnummerColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsnummer
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingstekstColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingstekst
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsvariable1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsvariable1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsvariable2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsvariable2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsvariable3Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsvariable3
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property meldingsvariable4Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmeldingsvariable4
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SAPsysteemColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSAPsysteem
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As sapReturnRow
                Get
                    Return CType(Me.Rows(index),sapReturnRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event sapReturnRowChanging As sapReturnRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event sapReturnRowChanged As sapReturnRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event sapReturnRowDeleting As sapReturnRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event sapReturnRowDeleted As sapReturnRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddsapReturnRow(ByVal row As sapReturnRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddsapReturnRow(ByVal meldingstype As String, ByVal meldingsklasse As String, ByVal meldingsnummer As String, ByVal meldingstekst As String, ByVal meldingsvariable1 As String, ByVal meldingsvariable2 As String, ByVal meldingsvariable3 As String, ByVal meldingsvariable4 As String, ByVal SAPsysteem As String) As sapReturnRow
                Dim rowsapReturnRow As sapReturnRow = CType(Me.NewRow,sapReturnRow)
                Dim columnValuesArray() As Object = New Object() {meldingstype, meldingsklasse, meldingsnummer, meldingstekst, meldingsvariable1, meldingsvariable2, meldingsvariable3, meldingsvariable4, SAPsysteem}
                rowsapReturnRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowsapReturnRow)
                Return rowsapReturnRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As sapReturnDataTable = CType(MyBase.Clone,sapReturnDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New sapReturnDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnmeldingstype = MyBase.Columns("meldingstype")
                Me.columnmeldingsklasse = MyBase.Columns("meldingsklasse")
                Me.columnmeldingsnummer = MyBase.Columns("meldingsnummer")
                Me.columnmeldingstekst = MyBase.Columns("meldingstekst")
                Me.columnmeldingsvariable1 = MyBase.Columns("meldingsvariable1")
                Me.columnmeldingsvariable2 = MyBase.Columns("meldingsvariable2")
                Me.columnmeldingsvariable3 = MyBase.Columns("meldingsvariable3")
                Me.columnmeldingsvariable4 = MyBase.Columns("meldingsvariable4")
                Me.columnSAPsysteem = MyBase.Columns("SAPsysteem")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnmeldingstype = New Global.System.Data.DataColumn("meldingstype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingstype)
                Me.columnmeldingsklasse = New Global.System.Data.DataColumn("meldingsklasse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsklasse)
                Me.columnmeldingsnummer = New Global.System.Data.DataColumn("meldingsnummer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsnummer)
                Me.columnmeldingstekst = New Global.System.Data.DataColumn("meldingstekst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingstekst)
                Me.columnmeldingsvariable1 = New Global.System.Data.DataColumn("meldingsvariable1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsvariable1)
                Me.columnmeldingsvariable2 = New Global.System.Data.DataColumn("meldingsvariable2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsvariable2)
                Me.columnmeldingsvariable3 = New Global.System.Data.DataColumn("meldingsvariable3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsvariable3)
                Me.columnmeldingsvariable4 = New Global.System.Data.DataColumn("meldingsvariable4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmeldingsvariable4)
                Me.columnSAPsysteem = New Global.System.Data.DataColumn("SAPsysteem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSAPsysteem)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewsapReturnRow() As sapReturnRow
                Return CType(Me.NewRow,sapReturnRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New sapReturnRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(sapReturnRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.sapReturnRowChangedEvent) Is Nothing) Then
                    RaiseEvent sapReturnRowChanged(Me, New sapReturnRowChangeEvent(CType(e.Row,sapReturnRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.sapReturnRowChangingEvent) Is Nothing) Then
                    RaiseEvent sapReturnRowChanging(Me, New sapReturnRowChangeEvent(CType(e.Row,sapReturnRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.sapReturnRowDeletedEvent) Is Nothing) Then
                    RaiseEvent sapReturnRowDeleted(Me, New sapReturnRowChangeEvent(CType(e.Row,sapReturnRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.sapReturnRowDeletingEvent) Is Nothing) Then
                    RaiseEvent sapReturnRowDeleting(Me, New sapReturnRowChangeEvent(CType(e.Row,sapReturnRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovesapReturnRow(ByVal row As sapReturnRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As tdsFirma = New tdsFirma()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "sapReturnDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class FirmaDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnfirmanummer As Global.System.Data.DataColumn
            
            Private columnfirmanaam As Global.System.Data.DataColumn
            
            Private columnparent As Global.System.Data.DataColumn
            
            Private columnparentnaam As Global.System.Data.DataColumn
            
            Private columnStraat As Global.System.Data.DataColumn
            
            Private columnPostcode As Global.System.Data.DataColumn
            
            Private columnPlaats As Global.System.Data.DataColumn
            
            Private columnLandcode As Global.System.Data.DataColumn
            
            Private columnIsActiefGent As Global.System.Data.DataColumn
            
            Private columnIsActiefLuik As Global.System.Data.DataColumn
            
            Private columnIsRealis As Global.System.Data.DataColumn
            
            Private columnIsGeblokkeerd As Global.System.Data.DataColumn
            
            Private columnIsAssuranceLoi As Global.System.Data.DataColumn
            
            Private columnTypeVeiligheidsCertificaat As Global.System.Data.DataColumn
            
            Private columnVervaldatumVeiligheidsCertificaat As Global.System.Data.DataColumn
            
            Private columnIsInSAP As Global.System.Data.DataColumn
            
            Private columnFirmaNrACE As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Firma"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property firmanummerColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfirmanummer
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property firmanaamColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfirmanaam
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property parentColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnparent
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property parentnaamColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnparentnaam
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property StraatColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStraat
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PostcodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPostcode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PlaatsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPlaats
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LandcodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLandcode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsActiefGentColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActiefGent
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsActiefLuikColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActiefLuik
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsRealisColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsRealis
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsGeblokkeerdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsGeblokkeerd
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsAssuranceLoiColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsAssuranceLoi
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property TypeVeiligheidsCertificaatColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTypeVeiligheidsCertificaat
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property VervaldatumVeiligheidsCertificaatColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVervaldatumVeiligheidsCertificaat
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IsInSAPColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsInSAP
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FirmaNrACEColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFirmaNrACE
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As FirmaRow
                Get
                    Return CType(Me.Rows(index),FirmaRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FirmaRowChanging As FirmaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FirmaRowChanged As FirmaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FirmaRowDeleting As FirmaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FirmaRowDeleted As FirmaRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddFirmaRow(ByVal row As FirmaRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddFirmaRow( _
                        ByVal firmanummer As Long,  _
                        ByVal firmanaam As String,  _
                        ByVal parent As Long,  _
                        ByVal parentnaam As String,  _
                        ByVal Straat As String,  _
                        ByVal Postcode As String,  _
                        ByVal Plaats As String,  _
                        ByVal Landcode As String,  _
                        ByVal IsActiefGent As Boolean,  _
                        ByVal IsActiefLuik As Boolean,  _
                        ByVal IsRealis As Boolean,  _
                        ByVal IsGeblokkeerd As Boolean,  _
                        ByVal IsAssuranceLoi As Boolean,  _
                        ByVal TypeVeiligheidsCertificaat As String,  _
                        ByVal VervaldatumVeiligheidsCertificaat As Date,  _
                        ByVal IsInSAP As Boolean,  _
                        ByVal FirmaNrACE As String) As FirmaRow
                Dim rowFirmaRow As FirmaRow = CType(Me.NewRow,FirmaRow)
                Dim columnValuesArray() As Object = New Object() {firmanummer, firmanaam, parent, parentnaam, Straat, Postcode, Plaats, Landcode, IsActiefGent, IsActiefLuik, IsRealis, IsGeblokkeerd, IsAssuranceLoi, TypeVeiligheidsCertificaat, VervaldatumVeiligheidsCertificaat, IsInSAP, FirmaNrACE}
                rowFirmaRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowFirmaRow)
                Return rowFirmaRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As FirmaDataTable = CType(MyBase.Clone,FirmaDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New FirmaDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnfirmanummer = MyBase.Columns("firmanummer")
                Me.columnfirmanaam = MyBase.Columns("firmanaam")
                Me.columnparent = MyBase.Columns("parent")
                Me.columnparentnaam = MyBase.Columns("parentnaam")
                Me.columnStraat = MyBase.Columns("Straat")
                Me.columnPostcode = MyBase.Columns("Postcode")
                Me.columnPlaats = MyBase.Columns("Plaats")
                Me.columnLandcode = MyBase.Columns("Landcode")
                Me.columnIsActiefGent = MyBase.Columns("IsActiefGent")
                Me.columnIsActiefLuik = MyBase.Columns("IsActiefLuik")
                Me.columnIsRealis = MyBase.Columns("IsRealis")
                Me.columnIsGeblokkeerd = MyBase.Columns("IsGeblokkeerd")
                Me.columnIsAssuranceLoi = MyBase.Columns("IsAssuranceLoi")
                Me.columnTypeVeiligheidsCertificaat = MyBase.Columns("TypeVeiligheidsCertificaat")
                Me.columnVervaldatumVeiligheidsCertificaat = MyBase.Columns("VervaldatumVeiligheidsCertificaat")
                Me.columnIsInSAP = MyBase.Columns("IsInSAP")
                Me.columnFirmaNrACE = MyBase.Columns("FirmaNrACE")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnfirmanummer = New Global.System.Data.DataColumn("firmanummer", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfirmanummer)
                Me.columnfirmanaam = New Global.System.Data.DataColumn("firmanaam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfirmanaam)
                Me.columnparent = New Global.System.Data.DataColumn("parent", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnparent)
                Me.columnparentnaam = New Global.System.Data.DataColumn("parentnaam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnparentnaam)
                Me.columnStraat = New Global.System.Data.DataColumn("Straat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStraat)
                Me.columnPostcode = New Global.System.Data.DataColumn("Postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPostcode)
                Me.columnPlaats = New Global.System.Data.DataColumn("Plaats", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPlaats)
                Me.columnLandcode = New Global.System.Data.DataColumn("Landcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLandcode)
                Me.columnIsActiefGent = New Global.System.Data.DataColumn("IsActiefGent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActiefGent)
                Me.columnIsActiefLuik = New Global.System.Data.DataColumn("IsActiefLuik", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActiefLuik)
                Me.columnIsRealis = New Global.System.Data.DataColumn("IsRealis", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsRealis)
                Me.columnIsGeblokkeerd = New Global.System.Data.DataColumn("IsGeblokkeerd", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsGeblokkeerd)
                Me.columnIsAssuranceLoi = New Global.System.Data.DataColumn("IsAssuranceLoi", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsAssuranceLoi)
                Me.columnTypeVeiligheidsCertificaat = New Global.System.Data.DataColumn("TypeVeiligheidsCertificaat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTypeVeiligheidsCertificaat)
                Me.columnVervaldatumVeiligheidsCertificaat = New Global.System.Data.DataColumn("VervaldatumVeiligheidsCertificaat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVervaldatumVeiligheidsCertificaat)
                Me.columnIsInSAP = New Global.System.Data.DataColumn("IsInSAP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsInSAP)
                Me.columnFirmaNrACE = New Global.System.Data.DataColumn("FirmaNrACE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirmaNrACE)
                Me.columnStraat.MaxLength = 250
                Me.columnPostcode.MaxLength = 50
                Me.columnPlaats.MaxLength = 250
                Me.columnLandcode.MaxLength = 50
                Me.columnIsAssuranceLoi.Caption = "AssuranceLoi"
                Me.columnTypeVeiligheidsCertificaat.MaxLength = 250
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewFirmaRow() As FirmaRow
                Return CType(Me.NewRow,FirmaRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New FirmaRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(FirmaRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.FirmaRowChangedEvent) Is Nothing) Then
                    RaiseEvent FirmaRowChanged(Me, New FirmaRowChangeEvent(CType(e.Row,FirmaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.FirmaRowChangingEvent) Is Nothing) Then
                    RaiseEvent FirmaRowChanging(Me, New FirmaRowChangeEvent(CType(e.Row,FirmaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.FirmaRowDeletedEvent) Is Nothing) Then
                    RaiseEvent FirmaRowDeleted(Me, New FirmaRowChangeEvent(CType(e.Row,FirmaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.FirmaRowDeletingEvent) Is Nothing) Then
                    RaiseEvent FirmaRowDeleting(Me, New FirmaRowChangeEvent(CType(e.Row,FirmaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveFirmaRow(ByVal row As FirmaRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As tdsFirma = New tdsFirma()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "FirmaDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class sapReturnRow
            Inherits Global.System.Data.DataRow
            
            Private tablesapReturn As sapReturnDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablesapReturn = CType(Me.Table,sapReturnDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingstype() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingstypeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingstype' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingstypeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsklasse() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsklasseColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsklasse' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsklasseColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsnummer() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsnummerColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsnummer' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsnummerColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingstekst() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingstekstColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingstekst' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingstekstColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsvariable1() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsvariable1Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsvariable1' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsvariable1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsvariable2() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsvariable2Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsvariable2' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsvariable2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsvariable3() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsvariable3Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsvariable3' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsvariable3Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property meldingsvariable4() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.meldingsvariable4Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'meldingsvariable4' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.meldingsvariable4Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SAPsysteem() As String
                Get
                    Try 
                        Return CType(Me(Me.tablesapReturn.SAPsysteemColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SAPsysteem' in table 'sapReturn' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablesapReturn.SAPsysteemColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsmeldingstypeNull() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingstypeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetmeldingstypeNull()
                Me(Me.tablesapReturn.meldingstypeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsmeldingsklasseNull() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsklasseColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetmeldingsklasseNull()
                Me(Me.tablesapReturn.meldingsklasseColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsmeldingsnummerNull() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsnummerColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetmeldingsnummerNull()
                Me(Me.tablesapReturn.meldingsnummerColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsmeldingstekstNull() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingstekstColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetmeldingstekstNull()
                Me(Me.tablesapReturn.meldingstekstColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismeldingsvariable1Null() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsvariable1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmeldingsvariable1Null()
                Me(Me.tablesapReturn.meldingsvariable1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismeldingsvariable2Null() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsvariable2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmeldingsvariable2Null()
                Me(Me.tablesapReturn.meldingsvariable2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismeldingsvariable3Null() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsvariable3Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmeldingsvariable3Null()
                Me(Me.tablesapReturn.meldingsvariable3Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismeldingsvariable4Null() As Boolean
                Return Me.IsNull(Me.tablesapReturn.meldingsvariable4Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmeldingsvariable4Null()
                Me(Me.tablesapReturn.meldingsvariable4Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSAPsysteemNull() As Boolean
                Return Me.IsNull(Me.tablesapReturn.SAPsysteemColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSAPsysteemNull()
                Me(Me.tablesapReturn.SAPsysteemColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class FirmaRow
            Inherits Global.System.Data.DataRow
            
            Private tableFirma As FirmaDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableFirma = CType(Me.Table,FirmaDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property firmanummer() As Long
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.firmanummerColumn),Long)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'firmanummer' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.firmanummerColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property firmanaam() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.firmanaamColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'firmanaam' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.firmanaamColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property parent() As Long
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.parentColumn),Long)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'parent' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.parentColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property parentnaam() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.parentnaamColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'parentnaam' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.parentnaamColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Straat() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.StraatColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Straat' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.StraatColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Postcode() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.PostcodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Postcode' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.PostcodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Plaats() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.PlaatsColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Plaats' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.PlaatsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Landcode() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.LandcodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Landcode' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.LandcodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsActiefGent() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsActiefGentColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsActiefGent' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsActiefGentColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsActiefLuik() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsActiefLuikColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsActiefLuik' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsActiefLuikColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsRealis() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsRealisColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsRealis' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsRealisColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsGeblokkeerd() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsGeblokkeerdColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsGeblokkeerd' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsGeblokkeerdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsAssuranceLoi() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsAssuranceLoiColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsAssuranceLoi' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsAssuranceLoiColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property TypeVeiligheidsCertificaat() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.TypeVeiligheidsCertificaatColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TypeVeiligheidsCertificaat' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.TypeVeiligheidsCertificaatColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property VervaldatumVeiligheidsCertificaat() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.VervaldatumVeiligheidsCertificaatColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'VervaldatumVeiligheidsCertificaat' in table 'Firma' is DBNu"& _ 
                                "ll.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.VervaldatumVeiligheidsCertificaatColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property IsInSAP() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.IsInSAPColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsInSAP' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.IsInSAPColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FirmaNrACE() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFirma.FirmaNrACEColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirmaNrACE' in table 'Firma' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFirma.FirmaNrACEColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsfirmanummerNull() As Boolean
                Return Me.IsNull(Me.tableFirma.firmanummerColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetfirmanummerNull()
                Me(Me.tableFirma.firmanummerColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsfirmanaamNull() As Boolean
                Return Me.IsNull(Me.tableFirma.firmanaamColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetfirmanaamNull()
                Me(Me.tableFirma.firmanaamColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsparentNull() As Boolean
                Return Me.IsNull(Me.tableFirma.parentColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetparentNull()
                Me(Me.tableFirma.parentColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsparentnaamNull() As Boolean
                Return Me.IsNull(Me.tableFirma.parentnaamColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetparentnaamNull()
                Me(Me.tableFirma.parentnaamColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsStraatNull() As Boolean
                Return Me.IsNull(Me.tableFirma.StraatColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetStraatNull()
                Me(Me.tableFirma.StraatColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPostcodeNull() As Boolean
                Return Me.IsNull(Me.tableFirma.PostcodeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPostcodeNull()
                Me(Me.tableFirma.PostcodeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPlaatsNull() As Boolean
                Return Me.IsNull(Me.tableFirma.PlaatsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPlaatsNull()
                Me(Me.tableFirma.PlaatsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLandcodeNull() As Boolean
                Return Me.IsNull(Me.tableFirma.LandcodeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLandcodeNull()
                Me(Me.tableFirma.LandcodeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsActiefGentNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsActiefGentColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsActiefGentNull()
                Me(Me.tableFirma.IsActiefGentColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsActiefLuikNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsActiefLuikColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsActiefLuikNull()
                Me(Me.tableFirma.IsActiefLuikColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsRealisNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsRealisColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsRealisNull()
                Me(Me.tableFirma.IsRealisColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsGeblokkeerdNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsGeblokkeerdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsGeblokkeerdNull()
                Me(Me.tableFirma.IsGeblokkeerdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsAssuranceLoiNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsAssuranceLoiColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsAssuranceLoiNull()
                Me(Me.tableFirma.IsAssuranceLoiColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsTypeVeiligheidsCertificaatNull() As Boolean
                Return Me.IsNull(Me.tableFirma.TypeVeiligheidsCertificaatColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetTypeVeiligheidsCertificaatNull()
                Me(Me.tableFirma.TypeVeiligheidsCertificaatColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsVervaldatumVeiligheidsCertificaatNull() As Boolean
                Return Me.IsNull(Me.tableFirma.VervaldatumVeiligheidsCertificaatColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetVervaldatumVeiligheidsCertificaatNull()
                Me(Me.tableFirma.VervaldatumVeiligheidsCertificaatColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsIsInSAPNull() As Boolean
                Return Me.IsNull(Me.tableFirma.IsInSAPColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetIsInSAPNull()
                Me(Me.tableFirma.IsInSAPColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFirmaNrACENull() As Boolean
                Return Me.IsNull(Me.tableFirma.FirmaNrACEColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFirmaNrACENull()
                Me(Me.tableFirma.FirmaNrACEColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class sapReturnRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As sapReturnRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As sapReturnRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As sapReturnRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class FirmaRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As FirmaRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As FirmaRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As FirmaRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/HRMService.Firma/Services")>  _
    Partial Public Class CompanyWithEmailAddresses
        
        Private companyNbrField As Long
        
        Private companyNbrAceField As String
        
        Private companyNameField As String
        
        Private emailAddressesField() As EmailAddresses
        
        '''<remarks/>
        Public Property CompanyNbr() As Long
            Get
                Return Me.companyNbrField
            End Get
            Set
                Me.companyNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyNbrAce() As String
            Get
                Return Me.companyNbrAceField
            End Get
            Set
                Me.companyNbrAceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyName() As String
            Get
                Return Me.companyNameField
            End Get
            Set
                Me.companyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailAddresses() As EmailAddresses()
            Get
                Return Me.emailAddressesField
            End Get
            Set
                Me.emailAddressesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/HRMService.Firma/Services")>  _
    Partial Public Class EmailAddresses
        
        Private applicationIdField As Integer
        
        Private applicationDescriptionField As String
        
        Private emailAddressField As String
        
        '''<remarks/>
        Public Property ApplicationId() As Integer
            Get
                Return Me.applicationIdField
            End Get
            Set
                Me.applicationIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApplicationDescription() As String
            Get
                Return Me.applicationDescriptionField
            End Get
            Set
                Me.applicationDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailAddress() As String
            Get
                Return Me.emailAddressField
            End Get
            Set
                Me.emailAddressField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetFirmaCompletedEventHandler(ByVal sender As Object, ByVal e As GetFirmaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFirmaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListChildrenCompletedEventHandler(ByVal sender As Object, ByVal e As GetListChildrenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListChildrenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListParentCompletedEventHandler(ByVal sender As Object, ByVal e As GetListParentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListParentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListParentHasActiveEmployeesCompletedEventHandler(ByVal sender As Object, ByVal e As GetListParentHasActiveEmployeesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListParentHasActiveEmployeesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListFirmaCompletedEventHandler(ByVal sender As Object, ByVal e As GetListFirmaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListFirmaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListFirmaActiveCompletedEventHandler(ByVal sender As Object, ByVal e As GetListFirmaActiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListFirmaActiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListFirmaActiveByRegioCompletedEventHandler(ByVal sender As Object, ByVal e As GetListFirmaActiveByRegioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListFirmaActiveByRegioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetListFirmaAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetListFirmaAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListFirmaAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub SearchFirmaAllCompletedEventHandler(ByVal sender As Object, ByVal e As SearchFirmaAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchFirmaAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub UpdateParentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateParentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateParentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub CreateFirmaCompletedEventHandler(ByVal sender As Object, ByVal e As CreateFirmaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFirmaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As tdsFirma
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),tdsFirma)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub SyncFirmasCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ActivateFirmaCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub GetCompanyWithEmailAddressesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyWithEmailAddressesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyWithEmailAddressesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CompanyWithEmailAddresses
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CompanyWithEmailAddresses)
            End Get
        End Property
    End Class
End Namespace
