com/panasonic/toughpad/android/api/appbtn/AppButtonManager = Com.Panasonic.Toughpad.Android.Api.Appbtn.AppButtonManager
  ACTION_APPBUTTON = ActionAppbutton
  BUTTON_A1 = ButtonA1
  BUTTON_A2 = ButtonA2
  BUTTON_A3 = ButtonA3
  BUTTON_SIDE = ButtonSide
  BUTTON_USER = ButtonUser
  EXTRA_APPBUTTON_BUTTON = ExtraAppbuttonButton
  EXTRA_APPBUTTON_STATE = ExtraAppbuttonState
  EXTRA_APPBUTTON_STATE_DOWN = ExtraAppbuttonStateDown
  EXTRA_APPBUTTON_STATE_UP = ExtraAppbuttonStateUp
  hasButtonControl()Z = HasButtonControl
  isButtonAvailable(I)Z = IsButtonAvailable(int)
com/panasonic/toughpad/android/api/barcode/BarcodeData = Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeData
  <init>([BLjava/lang/String;Ljava/lang/String;)V = .ctor(byte[], string, string)
  CREATOR = Creator
  SYMBOLOGY_ANKERCODE = SymbologyAnkercode
  SYMBOLOGY_AUSTRALIA_POST = SymbologyAustraliaPost
  SYMBOLOGY_AZTEC = SymbologyAztec
  SYMBOLOGY_BOOKLANDEAN = SymbologyBooklandean
  SYMBOLOGY_BPO = SymbologyBpo
  SYMBOLOGY_CANADA_POST = SymbologyCanadaPost
  SYMBOLOGY_CCA_EAN128 = SymbologyCcaEan128
  SYMBOLOGY_CCA_EAN13 = SymbologyCcaEan13
  SYMBOLOGY_CCA_EAN8 = SymbologyCcaEan8
  SYMBOLOGY_CCA_RSS14 = SymbologyCcaRss14
  SYMBOLOGY_CCA_RSSEXPANDED = SymbologyCcaRssexpanded
  SYMBOLOGY_CCA_RSSLIMITED = SymbologyCcaRsslimited
  SYMBOLOGY_CCA_UPCA = SymbologyCcaUpca
  SYMBOLOGY_CCA_UPCE = SymbologyCcaUpce
  SYMBOLOGY_CCB_EAN128 = SymbologyCcbEan128
  SYMBOLOGY_CCB_EAN13 = SymbologyCcbEan13
  SYMBOLOGY_CCB_EAN8 = SymbologyCcbEan8
  SYMBOLOGY_CCB_RSS14 = SymbologyCcbRss14
  SYMBOLOGY_CCB_RSSEXPANDED = SymbologyCcbRssexpanded
  SYMBOLOGY_CCB_RSSLIMITED = SymbologyCcbRsslimited
  SYMBOLOGY_CCB_UPCA = SymbologyCcbUpca
  SYMBOLOGY_CCB_UPCE = SymbologyCcbUpce
  SYMBOLOGY_CHINESE2OF5 = SymbologyChinese2of5
  SYMBOLOGY_CODABAR = SymbologyCodabar
  SYMBOLOGY_CODABLOCK = SymbologyCodablock
  SYMBOLOGY_CODE1 = SymbologyCode1
  SYMBOLOGY_CODE11 = SymbologyCode11
  SYMBOLOGY_CODE128 = SymbologyCode128
  SYMBOLOGY_CODE16K = SymbologyCode16k
  SYMBOLOGY_CODE32 = SymbologyCode32
  SYMBOLOGY_CODE39 = SymbologyCode39
  SYMBOLOGY_CODE49 = SymbologyCode49
  SYMBOLOGY_CODE93 = SymbologyCode93
  SYMBOLOGY_COUPONCODE = SymbologyCouponcode
  SYMBOLOGY_DATAMATRIX = SymbologyDatamatrix
  SYMBOLOGY_DISCRETE2OF5 = SymbologyDiscrete2of5
  SYMBOLOGY_DUTCH_POST = SymbologyDutchPost
  SYMBOLOGY_EAN128 = SymbologyEan128
  SYMBOLOGY_EAN13 = SymbologyEan13
  SYMBOLOGY_EAN13_SUPPLEMENTAL2 = SymbologyEan13Supplemental2
  SYMBOLOGY_EAN13_SUPPLEMENTAL5 = SymbologyEan13Supplemental5
  SYMBOLOGY_EAN8 = SymbologyEan8
  SYMBOLOGY_EAN8_SUPPLEMENTAL2 = SymbologyEan8Supplemental2
  SYMBOLOGY_EAN8_SUPPLEMENTAL5 = SymbologyEan8Supplemental5
  SYMBOLOGY_EAN_UPC = SymbologyEanUpc
  SYMBOLOGY_GS1COMPOSITE = SymbologyGs1composite
  SYMBOLOGY_HANXIN = SymbologyHanxin
  SYMBOLOGY_IATA2OF5 = SymbologyIata2of5
  SYMBOLOGY_INFOMAIL = SymbologyInfomail
  SYMBOLOGY_INTELLEGENT_MAIL = SymbologyIntellegentMail
  SYMBOLOGY_INTERLEAVED2OF5 = SymbologyInterleaved2of5
  SYMBOLOGY_ISBT128 = SymbologyIsbt128
  SYMBOLOGY_ISBT128_CON = SymbologyIsbt128Con
  SYMBOLOGY_ISSN_EAN = SymbologyIssnEan
  SYMBOLOGY_JAPAN_POST = SymbologyJapanPost
  SYMBOLOGY_KOREAN_POST = SymbologyKoreanPost
  SYMBOLOGY_MACRO_MICRO_PDF = SymbologyMacroMicroPdf
  SYMBOLOGY_MACRO_PDF = SymbologyMacroPdf
  SYMBOLOGY_MATRIX2OF5 = SymbologyMatrix2of5
  SYMBOLOGY_MAXICODE = SymbologyMaxicode
  SYMBOLOGY_MICRO_PDF = SymbologyMicroPdf
  SYMBOLOGY_MICRO_PDF_CCA = SymbologyMicroPdfCca
  SYMBOLOGY_MICRO_QRCODE = SymbologyMicroQrcode
  SYMBOLOGY_MSI = SymbologyMsi
  SYMBOLOGY_NW7 = SymbologyNw7
  SYMBOLOGY_PDF417 = SymbologyPdf417
  SYMBOLOGY_PLANET = SymbologyPlanet
  SYMBOLOGY_PLESSEYCODE = SymbologyPlesseycode
  SYMBOLOGY_POSTNET = SymbologyPostnet
  SYMBOLOGY_QRCODE = SymbologyQrcode
  SYMBOLOGY_RSS14 = SymbologyRss14
  SYMBOLOGY_RSSEXPANDED = SymbologyRssexpanded
  SYMBOLOGY_RSSLIMITED = SymbologyRsslimited
  SYMBOLOGY_SCANLET = SymbologyScanlet
  SYMBOLOGY_SIGNATURE_CAPTURE = SymbologySignatureCapture
  SYMBOLOGY_SWEDEN_POST = SymbologySwedenPost
  SYMBOLOGY_TELEPEN = SymbologyTelepen
  SYMBOLOGY_TLC39 = SymbologyTlc39
  SYMBOLOGY_TRIOPTICCODE39 = SymbologyTriopticcode39
  SYMBOLOGY_UCC_COUPON = SymbologyUccCoupon
  SYMBOLOGY_UK_POST = SymbologyUkPost
  SYMBOLOGY_UNKNOWN = SymbologyUnknown
  SYMBOLOGY_UPCA = SymbologyUpca
  SYMBOLOGY_UPCA_SUPPLEMENTAL2 = SymbologyUpcaSupplemental2
  SYMBOLOGY_UPCA_SUPPLEMENTAL5 = SymbologyUpcaSupplemental5
  SYMBOLOGY_UPCD = SymbologyUpcd
  SYMBOLOGY_UPCE0 = SymbologyUpce0
  SYMBOLOGY_UPCE0_SUPPLEMENTAL2 = SymbologyUpce0Supplemental2
  SYMBOLOGY_UPCE0_SUPPLEMENTAL5 = SymbologyUpce0Supplemental5
  SYMBOLOGY_UPCE1 = SymbologyUpce1
  SYMBOLOGY_UPCE1_SUPPLEMENTAL2 = SymbologyUpce1Supplemental2
  SYMBOLOGY_UPCE1_SUPPLEMENTAL5 = SymbologyUpce1Supplemental5
  SYMBOLOGY_USPS4CB = SymbologyUsps4cb
  getEncoding()Ljava/lang/String; = Encoding
  getSymbology()Ljava/lang/String; = Symbology
  getTextData()Ljava/lang/String; = TextData
  describeContents()I = DescribeContents()
  getBinaryData()[B = GetBinaryData()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/panasonic/toughpad/android/api/barcode/BarcodeException = Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeException
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
com/panasonic/toughpad/android/api/barcode/BarcodeListener = Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeListener
  onRead(Lcom/panasonic/toughpad/android/api/barcode/BarcodeReader;Lcom/panasonic/toughpad/android/api/barcode/BarcodeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeReader, Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeData)
com/panasonic/toughpad/android/api/barcode/BarcodeReader = Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeReader
  BARCODE_TYPE_CAMERA = BarcodeTypeCamera
  BARCODE_TYPE_ONE_DIMENSIONAL = BarcodeTypeOneDimensional
  BARCODE_TYPE_TWO_DIMENSIONAL = BarcodeTypeTwoDimensional
  getBarcodeType()I = BarcodeType
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isHardwareTriggerEnabled()Z = HardwareTriggerEnabled
  setHardwareTriggerEnabled(Z)V = HardwareTriggerEnabled
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  isHardwareTriggerAvailable()Z = IsHardwareTriggerAvailable
  addBarcodeListener(Lcom/panasonic/toughpad/android/api/barcode/BarcodeListener;)V = AddBarcodeListener(Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeListener)
  clearBarcodeListener()V = ClearBarcodeListener()
  disable()V = Disable()
  enable(J)V = Enable(long)
  pressSoftwareTrigger(Z)V = PressSoftwareTrigger(bool)
  removeBarcodeListener(Lcom/panasonic/toughpad/android/api/barcode/BarcodeListener;)V = RemoveBarcodeListener(Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeListener)
com/panasonic/toughpad/android/api/barcode/BarcodeReaderManager = Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeReaderManager
  <init>()V = .ctor()
  getBarcodeReaders()Ljava/util/List; = BarcodeReaders
com/panasonic/toughpad/android/api/cradle/Cradle = Com.Panasonic.Toughpad.Android.Api.Cradle.Cradle
  ACTION_CRADLE_CHANGED = ActionCradleChanged
  CRADLE_TYPE_COMMUNICATION = CradleTypeCommunication
  CRADLE_TYPE_ERROR = CradleTypeError
  CRADLE_TYPE_NONE = CradleTypeNone
  CRADLE_TYPE_NORMAL = CradleTypeNormal
  EXTRA_CRADLE_TYPE = ExtraCradleType
  getCradleType()I = CradleType
com/panasonic/toughpad/android/api/magstripe/MagStripeData = Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeData
  <init>([Ljava/lang/String;[Ljava/lang/String;[BZZ)V = .ctor(string[], string[], byte[], bool, bool)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  isGoodSwipe()Z = IsGoodSwipe
  isTrackDataEncrypted()Z = IsTrackDataEncrypted
  describeContents()I = DescribeContents()
  getMaskedTrackData(I)Ljava/lang/String; = GetMaskedTrackData(int)
  getRawData()[B = GetRawData()
  getTrackData(I)Ljava/lang/String; = GetTrackData(int)
  readFromParcel(Landroid/os/Parcel;)V = ReadFromParcel(Android.OS.Parcel)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/panasonic/toughpad/android/api/magstripe/MagStripeException = Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
com/panasonic/toughpad/android/api/magstripe/MagStripeListener = Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeListener
  onRead(Lcom/panasonic/toughpad/android/api/magstripe/MagStripeReader;Lcom/panasonic/toughpad/android/api/magstripe/MagStripeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeReader, Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeData)
com/panasonic/toughpad/android/api/magstripe/MagStripeReader = Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeReader
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  addMagStripeListener(Lcom/panasonic/toughpad/android/api/magstripe/MagStripeListener;)V = AddMagStripeListener(Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeListener)
  clearMagStripeListeners()V = ClearMagStripeListeners()
  disable()V = Disable()
  enable(J)V = Enable(long)
  removeMagStripeRListener(Lcom/panasonic/toughpad/android/api/magstripe/MagStripeListener;)V = RemoveMagStripeRListener(Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeListener)
com/panasonic/toughpad/android/api/magstripe/MagStripeReaderManager = Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeReaderManager
  <init>()V = .ctor()
  getMagStripeReaders()Ljava/util/List; = MagStripeReaders
com/panasonic/toughpad/android/api/magstripe/magtek/MagTekMagStripeData = Com.Panasonic.Toughpad.Android.Api.Magstripe.Magtek.MagTekMagStripeData
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getCardName()Ljava/lang/String; = CardName
  getCardServiceCode()Ljava/lang/String; = CardServiceCode
  getCardStatus()Ljava/lang/String; = CardStatus
  getEncodeType()B = EncodeType
  getEncryptedCount()Ljava/lang/String; = EncryptedCount
  getEncryptionStatus()Ljava/lang/String; = EncryptionStatus
  getExperationDate()Ljava/lang/String; = ExperationDate
  getFirmware()Ljava/lang/String; = Firmware
  getIIN()Ljava/lang/String; = IIN
  getKSN()Ljava/lang/String; = KSN
  getLast4Digits()Ljava/lang/String; = Last4Digits
  getMagnePrint()Ljava/lang/String; = MagnePrint
  getMagnePrintStatus()Ljava/lang/String; = MagnePrintStatus
  getMaskedPAN()Ljava/lang/String; = MaskedPAN
  getMSRSerialNumber()Ljava/lang/String; = MSRSerialNumber
  getPANLength()I = PANLength
  getSessionId()Ljava/lang/String; = SessionId
  getTrackDecodeStatus()Ljava/lang/String; = TrackDecodeStatus
com/panasonic/toughpad/android/api/pwrmgmt/PortPowerManager = Com.Panasonic.Toughpad.Android.Api.Pwrmgmt.PortPowerManager
  PORT_GADGET = PortGadget
  PORT_MICRO_USB = PortMicroUsb
  isPortAvailable(I)Z = IsPortAvailable(int)
  isSelectiveSuspend(I)Z = IsSelectiveSuspend(int)
  isVBUSSupply(I)Z = IsVBUSSupply(int)
  setSelectiveSuspend(IZ)V = SetSelectiveSuspend(int, bool)
  setVBUSSupply(IZ)V = SetVBUSSupply(int, bool)
com/panasonic/toughpad/android/api/serial/SerialPort = Com.Panasonic.Toughpad.Android.Api.Serial.ISerialPort
  BAUDRATE_115200 = Baudrate115200
  BAUDRATE_1200 = Baudrate1200
  BAUDRATE_1800 = Baudrate1800
  BAUDRATE_19200 = Baudrate19200
  BAUDRATE_2400 = Baudrate2400
  BAUDRATE_300 = Baudrate300
  BAUDRATE_38400 = Baudrate38400
  BAUDRATE_4800 = Baudrate4800
  BAUDRATE_57600 = Baudrate57600
  BAUDRATE_600 = Baudrate600
  BAUDRATE_9600 = Baudrate9600
  DATASIZE_5 = Datasize5
  DATASIZE_6 = Datasize6
  DATASIZE_7 = Datasize7
  DATASIZE_8 = Datasize8
  FLOWCONTROL_NONE = FlowcontrolNone
  FLOWCONTROL_RTS_CTS = FlowcontrolRtsCts
  FLOWCONTROL_XON_XOFF = FlowcontrolXonXoff
  PARITY_EVEN = ParityEven
  PARITY_NONE = ParityNone
  PARITY_ODD = ParityOdd
  STOPBITS_1 = Stopbits1
  STOPBITS_2 = Stopbits2
  getDeviceName()Ljava/lang/String; = DeviceName
  getInputStream()Ljava/io/InputStream; = InputStream
  isEnabled()Z = IsEnabled
  getOutputStream()Ljava/io/OutputStream; = OutputStream
  disable()V = Disable()
  enable(IIIII)V = Enable(int, int, int, int, int)
com/panasonic/toughpad/android/api/serial/SerialPortManager = Com.Panasonic.Toughpad.Android.Api.Serial.SerialPortManager
  <init>()V = .ctor()
  getSerialPorts()Ljava/util/List; = SerialPorts
com/panasonic/toughpad/android/api/ToughpadApi = Com.Panasonic.Toughpad.Android.Api.ToughpadApi
  getClientVersion()I = ClientVersion
  isAlreadyInitialized()Z = IsAlreadyInitialized
  getServerVersion()I = ServerVersion
  destroy()V = Destroy()
  getToughpadApi()Lcom/panasonic/toughpad/android/contract/IToughpadApi; = GetToughpadApi()
  initialize(Landroid/content/Context;Lcom/panasonic/toughpad/android/api/ToughpadApiListener;)V = Initialize(Android.Content.Context, Com.Panasonic.Toughpad.Android.Api.IToughpadApiListener)
com/panasonic/toughpad/android/api/ToughpadApiListener = Com.Panasonic.Toughpad.Android.Api.IToughpadApiListener
  onApiConnected(I)V = OnApiConnected(int)
  onApiDisconnected()V = OnApiDisconnected()
com/panasonic/toughpad/android/apitocontract/BarcodeReaderApiToContract = Com.Panasonic.Toughpad.Android.Apitocontract.BarcodeReaderApiToContract
  <init>(Lcom/panasonic/toughpad/android/contract/IBarcodeReader;)V = .ctor(Com.Panasonic.Toughpad.Android.Contract.IBarcodeReader)
  getBarcodeType()I = BarcodeType
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isHardwareTriggerEnabled()Z = HardwareTriggerEnabled
  setHardwareTriggerEnabled(Z)V = HardwareTriggerEnabled
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  isHardwareTriggerAvailable()Z = IsHardwareTriggerAvailable
  addBarcodeListener(Lcom/panasonic/toughpad/android/api/barcode/BarcodeListener;)V = AddBarcodeListener(Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeListener)
  clearBarcodeListener()V = ClearBarcodeListener()
  disable()V = Disable()
  enable(J)V = Enable(long)
  onRead(Lcom/panasonic/toughpad/android/contract/IBarcodeReader;Lcom/panasonic/toughpad/android/api/barcode/BarcodeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Contract.IBarcodeReader, Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeData)
  pressSoftwareTrigger(Z)V = PressSoftwareTrigger(bool)
  removeBarcodeListener(Lcom/panasonic/toughpad/android/api/barcode/BarcodeListener;)V = RemoveBarcodeListener(Com.Panasonic.Toughpad.Android.Api.Barcode.IBarcodeListener)
com/panasonic/toughpad/android/apitocontract/MagStripeReaderApiToContract = Com.Panasonic.Toughpad.Android.Apitocontract.MagStripeReaderApiToContract
  <init>(Lcom/panasonic/toughpad/android/contract/IMagStripeReader;)V = .ctor(Com.Panasonic.Toughpad.Android.Contract.IMagStripeReader)
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  addMagStripeListener(Lcom/panasonic/toughpad/android/api/magstripe/MagStripeListener;)V = AddMagStripeListener(Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeListener)
  clearMagStripeListeners()V = ClearMagStripeListeners()
  disable()V = Disable()
  enable(J)V = Enable(long)
  onRead(Lcom/panasonic/toughpad/android/contract/IMagStripeReader;Lcom/panasonic/toughpad/android/api/magstripe/MagStripeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Contract.IMagStripeReader, Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeData)
  removeMagStripeRListener(Lcom/panasonic/toughpad/android/api/magstripe/MagStripeListener;)V = RemoveMagStripeRListener(Com.Panasonic.Toughpad.Android.Api.Magstripe.IMagStripeListener)
com/panasonic/toughpad/android/apitocontract/SerialPortApiToContract = Com.Panasonic.Toughpad.Android.Apitocontract.SerialPortApiToContract
  <init>(Lcom/panasonic/toughpad/android/contract/ISerialPort;)V = .ctor(Com.Panasonic.Toughpad.Android.Contract.ISerialPort)
  getDeviceName()Ljava/lang/String; = DeviceName
  getInputStream()Ljava/io/InputStream; = InputStream
  isEnabled()Z = IsEnabled
  getOutputStream()Ljava/io/OutputStream; = OutputStream
  disable()V = Disable()
  enable(IIIII)V = Enable(int, int, int, int, int)
com/panasonic/toughpad/android/contract/CheckedExceptionWrapper = Com.Panasonic.Toughpad.Android.Contract.CheckedExceptionWrapper
  <init>()V = .ctor()
  <init>(Ljava/lang/Exception;)V = .ctor(Java.Lang.Exception)
  resolveException(Ljava/lang/IllegalStateException;Ljava/lang/Class;)Z = ResolveException(Java.Lang.IllegalStateException, Java.Lang.Class)
  resolveExceptionAlways(Ljava/lang/IllegalStateException;Ljava/lang/Class;)Ljava/lang/Object; = ResolveExceptionAlways(Java.Lang.IllegalStateException, Java.Lang.Class)
  serializeException(Ljava/lang/Exception;)Ljava/lang/String; = SerializeException(Java.Lang.Exception)
com/panasonic/toughpad/android/contract/IAppButtonManager = Com.Panasonic.Toughpad.Android.Contract.IAppButtonManager
  hasButtonControl()Z = HasButtonControl
  isButtonAvailable(I)Z = IsButtonAvailable(int)
com/panasonic/toughpad/android/contract/IBarcodeListener = Com.Panasonic.Toughpad.Android.Contract.IBarcodeListener
  onRead(Lcom/panasonic/toughpad/android/contract/IBarcodeReader;Lcom/panasonic/toughpad/android/api/barcode/BarcodeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Contract.IBarcodeReader, Com.Panasonic.Toughpad.Android.Api.Barcode.BarcodeData)
com/panasonic/toughpad/android/contract/IBarcodeReader = Com.Panasonic.Toughpad.Android.Contract.IBarcodeReader
  getBarcodeType()I = BarcodeType
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isHardwareTriggerEnabled()Z = HardwareTriggerEnabled
  setHardwareTriggerEnabled(Z)V = HardwareTriggerEnabled
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  isHardwareTriggerAvailable()Z = IsHardwareTriggerAvailable
  disable()V = Disable()
  enable(J)V = Enable(long)
  pressSoftwareTrigger(Z)V = PressSoftwareTrigger(bool)
  setBarcodeListener(Lcom/panasonic/toughpad/android/contract/IBarcodeListener;)V = SetBarcodeListener(Com.Panasonic.Toughpad.Android.Contract.IBarcodeListener)
com/panasonic/toughpad/android/contract/IBarcodeReaderManager = Com.Panasonic.Toughpad.Android.Contract.IBarcodeReaderManager
  getBarcodeReaders()Ljava/util/List; = BarcodeReaders
com/panasonic/toughpad/android/contract/ICradle = Com.Panasonic.Toughpad.Android.Contract.ICradle
  getCradleType()I = CradleType
com/panasonic/toughpad/android/contract/IMagStripeListener = Com.Panasonic.Toughpad.Android.Contract.IMagStripeListener
  onRead(Lcom/panasonic/toughpad/android/contract/IMagStripeReader;Lcom/panasonic/toughpad/android/api/magstripe/MagStripeData;)V = OnRead(Com.Panasonic.Toughpad.Android.Contract.IMagStripeReader, Com.Panasonic.Toughpad.Android.Api.Magstripe.MagStripeData)
com/panasonic/toughpad/android/contract/IMagStripeReader = Com.Panasonic.Toughpad.Android.Contract.IMagStripeReader
  getBatteryCharge()I = BatteryCharge
  getDeviceFirmwareVersion()Ljava/lang/String; = DeviceFirmwareVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getDeviceSerialNumber()Ljava/lang/String; = DeviceSerialNumber
  isBatteryCharging()Z = IsBatteryCharging
  isEnabled()Z = IsEnabled
  isExternal()Z = IsExternal
  disable()V = Disable()
  enable(J)V = Enable(long)
  setMagStripeListener(Lcom/panasonic/toughpad/android/contract/IMagStripeListener;)V = SetMagStripeListener(Com.Panasonic.Toughpad.Android.Contract.IMagStripeListener)
com/panasonic/toughpad/android/contract/IMagStripeReaderManager = Com.Panasonic.Toughpad.Android.Contract.IMagStripeReaderManager
  getMagStripeReaders()Ljava/util/List; = MagStripeReaders
com/panasonic/toughpad/android/contract/IPortPowerManager = Com.Panasonic.Toughpad.Android.Contract.IPortPowerManager
  isPortAvailable(I)Z = IsPortAvailable(int)
  isSelectiveSuspend(I)Z = IsSelectiveSuspend(int)
  isVBUSSupply(I)Z = IsVBUSSupply(int)
  setSelectiveSuspend(IZ)V = SetSelectiveSuspend(int, bool)
  setVBUSSupply(IZ)V = SetVBUSSupply(int, bool)
com/panasonic/toughpad/android/contract/ISerialPort = Com.Panasonic.Toughpad.Android.Contract.ISerialPort
  getDeviceName()Ljava/lang/String; = DeviceName
  isEnabled()Z = IsEnabled
  getReadFd()Landroid/os/ParcelFileDescriptor; = ReadFd
  getWriteFd()Landroid/os/ParcelFileDescriptor; = WriteFd
  disable()V = Disable()
  enable(IIIII)V = Enable(int, int, int, int, int)
com/panasonic/toughpad/android/contract/ISerialPortManager = Com.Panasonic.Toughpad.Android.Contract.ISerialPortManager
  getSerialPorts()Ljava/util/List; = SerialPorts
com/panasonic/toughpad/android/contract/IToughpadApi = Com.Panasonic.Toughpad.Android.Contract.IToughpadApi
  getAppButtonManager()Lcom/panasonic/toughpad/android/contract/IAppButtonManager; = AppButtonManager
  getBarcodeReaderManager()Lcom/panasonic/toughpad/android/contract/IBarcodeReaderManager; = BarcodeReaderManager
  getCradle()Lcom/panasonic/toughpad/android/contract/ICradle; = Cradle
  getMagStripeReaderManager()Lcom/panasonic/toughpad/android/contract/IMagStripeReaderManager; = MagStripeReaderManager
  getPortPowerManager()Lcom/panasonic/toughpad/android/contract/IPortPowerManager; = PortPowerManager
  getSerialPortManager()Lcom/panasonic/toughpad/android/contract/ISerialPortManager; = SerialPortManager
  getVersion()I = Version
